(()=>{var e={23:e=>{"use strict";e.exports=require("util")},38:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DriverDetector=void 0;const a=n(317),i=(0,n(23).promisify)(a.exec);t.DriverDetector=class{static async detectWindowsVBCable(){try{const{stdout:e}=await i("\n        powershell -Command \"\n          Get-WmiObject -Class Win32_SoundDevice | \n          Where-Object { $_.Name -like '*VB-Audio*' -or $_.Name -like '*CABLE*' } | \n          Select-Object Name, Status\n        \"\n      ");if(e.includes("VB-Audio")||e.includes("CABLE")){const t=e.match(/Name\s+:\s+(.+)/)?.[1]?.trim();return{installed:!0,deviceName:t||"VB-Audio Virtual Cable",version:"Unknown"}}return{installed:!1}}catch(e){return console.error("Error detecting VB-Cable:",e),{installed:!1,error:e instanceof Error?e.message:"Unknown error"}}}static async detectMacOSBlackHole(){try{const{stdout:e}=await i("system_profiler SPAudioDataType");if(e.includes("BlackHole")){const t=e.match(/BlackHole.*?(\d+\.\d+\.\d+)/);return{installed:!0,deviceName:"BlackHole",version:t?.[1]||"Unknown"}}try{const{stdout:e}=await i("ls /System/Library/Extensions/ | grep -i blackhole");if(e.trim())return{installed:!0,deviceName:"BlackHole",version:"Unknown"}}catch{}return{installed:!1}}catch(e){return console.error("Error detecting BlackHole:",e),{installed:!1,error:e instanceof Error?e.message:"Unknown error"}}}static async getCurrentPlatformDriver(){return"win32"===process.platform?this.detectWindowsVBCable():"darwin"===process.platform?this.detectMacOSBlackHole():{installed:!1,error:"Unsupported platform"}}static getDriverDownloadUrl(){return"win32"===process.platform?"https://vb-audio.com/Cable/":"darwin"===process.platform?"https://github.com/ExistentialAudio/BlackHole/releases":""}static getDriverName(){return"win32"===process.platform?"VB-Cable":"darwin"===process.platform?"BlackHole":"Unknown Driver"}}},86:e=>{"use strict";e.exports=require("ws")},270:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.OverlayManager=void 0;const a=n(482),i=n(928);t.OverlayManager=class{constructor(){this.overlayWindow=null,this.isVisible=!1,this.currentPosition=null,this.setupAppEvents()}setupAppEvents(){a.app.on("browser-window-blur",(()=>{this.overlayWindow&&this.isVisible&&this.overlayWindow.hide()})),a.app.on("browser-window-focus",(()=>{this.overlayWindow&&this.isVisible&&this.overlayWindow.show()}))}createStealthOverlay(e,t){this.overlayWindow&&this.destroyOverlay();const n=a.screen.getPrimaryDisplay(),{width:r,height:s}=n.workAreaSize,o={x:r-350,y:s-500,width:320,height:450};this.currentPosition=t||o,this.overlayWindow=new a.BrowserWindow({width:this.currentPosition.width,height:this.currentPosition.height,x:this.currentPosition.x,y:this.currentPosition.y,frame:!1,alwaysOnTop:!0,skipTaskbar:!0,transparent:!0,resizable:!1,minimizable:!1,maximizable:!1,closable:!1,focusable:!1,webPreferences:{nodeIntegration:!1,contextIsolation:!0,preload:(0,i.join)(__dirname,"overlay-preload.js"),webSecurity:!0,allowRunningInsecureContent:!1},show:!1});const l=`data:text/html;charset=utf-8,${encodeURIComponent(this.getOverlayHTML(e))}`;return this.overlayWindow.loadURL(l),this.applyStealthMeasures(),this.setupOverlayEvents(),console.log("Stealth overlay created for session:",e),this.overlayWindow}applyStealthMeasures(){if(!this.overlayWindow)return;const e=this.overlayWindow.getNativeWindowHandle();if("win32"===process.platform){const{exec:t}=n(317);t(`powershell -Command "\n        Add-Type -TypeDefinition '\n          using System;\n          using System.Runtime.InteropServices;\n          public class Win32 {\n            [DllImport(\\"user32.dll\\")]\n            public static extern bool SetWindowDisplayAffinity(IntPtr hwnd, uint affinity);\n            \n            [DllImport(\\"user32.dll\\")]\n            public static extern bool SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int X, int Y, int cx, int cy, uint uFlags);\n            \n            public static readonly IntPtr HWND_TOPMOST = new IntPtr(-1);\n            public static readonly uint SWP_NOMOVE = 0x0002;\n            public static readonly uint SWP_NOSIZE = 0x0001;\n            public static readonly uint SWP_SHOWWINDOW = 0x0040;\n          }\n        ';\n        [Win32]::SetWindowDisplayAffinity(${e}, 0x00000011);\n        [Win32]::SetWindowPos(${e}, [Win32]::HWND_TOPMOST, 0, 0, 0, 0, 0x0003);\n      "`,(e=>{e?console.warn("Failed to apply Windows stealth measures:",e):console.log("Windows stealth measures applied successfully")}))}else if("darwin"===process.platform){this.overlayWindow.setAlwaysOnTop(!0,"screen-saver",1);const{exec:e}=n(317);this.overlayWindow.id,e('osascript -e \'tell application "System Events" to set visible of process "InterviewAce Helper" to false\'',(e=>{e&&console.warn("Failed to hide from Mission Control:",e)}))}}setupOverlayEvents(){this.overlayWindow&&(this.overlayWindow.on("close",(e=>{e.preventDefault(),this.hideOverlay()})),this.overlayWindow.on("blur",(()=>{this.overlayWindow&&this.isVisible&&this.overlayWindow.setAlwaysOnTop(!0,"screen-saver",1)})),this.overlayWindow.on("moved",(()=>{if(this.overlayWindow){const e=this.overlayWindow.getBounds();this.currentPosition=e}})))}getOverlayHTML(e){return`\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>InterviewAce - Stealth Mode</title>\n        <style>\n          * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n          }\n          \n          body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            background: linear-gradient(135deg, rgba(0,0,0,0.95) 0%, rgba(30,30,30,0.98) 100%);\n            color: white;\n            height: 100vh;\n            overflow: hidden;\n            backdrop-filter: blur(10px);\n            border-radius: 12px;\n            border: 1px solid rgba(255,255,255,0.1);\n          }\n          \n          .header {\n            padding: 8px 12px;\n            background: rgba(255,255,255,0.05);\n            border-bottom: 1px solid rgba(255,255,255,0.1);\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n          }\n          \n          .logo {\n            font-size: 12px;\n            font-weight: 600;\n            color: #60a5fa;\n          }\n          \n          .status {\n            font-size: 10px;\n            padding: 2px 6px;\n            background: rgba(34, 197, 94, 0.2);\n            border: 1px solid rgba(34, 197, 94, 0.3);\n            border-radius: 4px;\n            color: #22c55e;\n          }\n          \n          .content {\n            padding: 12px;\n            height: calc(100vh - 40px);\n            overflow-y: auto;\n          }\n          \n          .waiting-state {\n            text-align: center;\n            padding: 40px 20px;\n            color: #9ca3af;\n          }\n          \n          .waiting-icon {\n            width: 32px;\n            height: 32px;\n            margin: 0 auto 12px;\n            border: 2px solid #4f46e5;\n            border-top: 2px solid transparent;\n            border-radius: 50%;\n            animation: spin 1s linear infinite;\n          }\n          \n          @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n          }\n          \n          .answer-card {\n            background: rgba(255,255,255,0.05);\n            border: 1px solid rgba(255,255,255,0.1);\n            border-radius: 8px;\n            padding: 12px;\n            margin-bottom: 12px;\n            animation: slideIn 0.3s ease-out;\n          }\n          \n          @keyframes slideIn {\n            from { opacity: 0; transform: translateY(10px); }\n            to { opacity: 1; transform: translateY(0); }\n          }\n          \n          .question {\n            font-size: 11px;\n            color: #e5e7eb;\n            margin-bottom: 8px;\n            font-weight: 500;\n          }\n          \n          .answer {\n            font-size: 12px;\n            line-height: 1.4;\n            color: white;\n          }\n          \n          .timestamp {\n            font-size: 9px;\n            color: #6b7280;\n            margin-top: 6px;\n            text-align: right;\n          }\n          \n          .controls {\n            position: absolute;\n            bottom: 8px;\n            right: 8px;\n            display: flex;\n            gap: 4px;\n          }\n          \n          .control-btn {\n            width: 20px;\n            height: 20px;\n            background: rgba(255,255,255,0.1);\n            border: none;\n            border-radius: 4px;\n            color: white;\n            cursor: pointer;\n            font-size: 10px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n          }\n          \n          .control-btn:hover {\n            background: rgba(255,255,255,0.2);\n          }\n          \n          ::-webkit-scrollbar {\n            width: 4px;\n          }\n          \n          ::-webkit-scrollbar-track {\n            background: rgba(255,255,255,0.05);\n          }\n          \n          ::-webkit-scrollbar-thumb {\n            background: rgba(255,255,255,0.2);\n            border-radius: 2px;\n          }\n        </style>\n      </head>\n      <body>\n        <div class="header">\n          <div class="logo">InterviewAce</div>\n          <div class="status" id="status">Stealth Mode</div>\n        </div>\n        \n        <div class="content" id="content">\n          <div class="waiting-state">\n            <div class="waiting-icon"></div>\n            <div>Waiting for questions...</div>\n            <div style="font-size: 9px; margin-top: 4px;">Session: ${e.substring(0,8)}...</div>\n          </div>\n        </div>\n        \n        <div class="controls">\n          <button class="control-btn" onclick="toggleSize()" title="Toggle Size">⤢</button>\n          <button class="control-btn" onclick="hideWindow()" title="Hide">✕</button>\n        </div>\n        \n        <script>\n          let answers = [];\n          let isCompact = false;\n          \n          // Connect to the main process for real-time updates\n          window.electronAPI?.onCaptureStatusChange?.((status) => {\n            const statusEl = document.getElementById('status');\n            if (status.status === 'active') {\n              statusEl.textContent = 'Recording';\n              statusEl.style.background = 'rgba(239, 68, 68, 0.2)';\n              statusEl.style.borderColor = 'rgba(239, 68, 68, 0.3)';\n              statusEl.style.color = '#ef4444';\n            } else {\n              statusEl.textContent = 'Stealth Mode';\n              statusEl.style.background = 'rgba(34, 197, 94, 0.2)';\n              statusEl.style.borderColor = 'rgba(34, 197, 94, 0.3)';\n              statusEl.style.color = '#22c55e';\n            }\n          });\n          \n          function addAnswer(question, answer) {\n            const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n            answers.unshift({ question, answer, timestamp });\n            \n            updateContent();\n          }\n          \n          function updateContent() {\n            const content = document.getElementById('content');\n            \n            if (answers.length === 0) {\n              content.innerHTML = \`\n                <div class="waiting-state">\n                  <div class="waiting-icon"></div>\n                  <div>Waiting for questions...</div>\n                  <div style="font-size: 9px; margin-top: 4px;">Session: ${e.substring(0,8)}...</div>\n                </div>\n              \`;\n              return;\n            }\n            \n            content.innerHTML = answers.map(item => \`\n              <div class="answer-card">\n                <div class="question">"\${item.question.length > 100 ? item.question.substring(0, 100) + '...' : item.question}"</div>\n                <div class="answer">\${isCompact ? (item.answer.substring(0, 150) + (item.answer.length > 150 ? '...' : '')) : item.answer}</div>\n                <div class="timestamp">\${item.timestamp}</div>\n              </div>\n            \`).join('');\n          }\n          \n          function toggleSize() {\n            isCompact = !isCompact;\n            updateContent();\n          }\n          \n          function hideWindow() {\n            window.electronAPI?.hideOverlay?.();\n          }\n          \n          // Simulate receiving answers (will be replaced with real WebSocket connection)\n          setTimeout(() => {\n            addAnswer(\n              "What is your greatest strength?",\n              "My greatest strength is my ability to adapt quickly to new situations and technologies. I'm naturally curious and enjoy learning, which allows me to stay current with industry trends and continuously improve my skills."\n            );\n          }, 3000);\n        <\/script>\n      </body>\n      </html>\n    `}showOverlay(){this.overlayWindow&&(this.overlayWindow.show(),this.isVisible=!0,console.log("Stealth overlay shown"))}hideOverlay(){this.overlayWindow&&(this.overlayWindow.hide(),this.isVisible=!1,console.log("Stealth overlay hidden"))}toggleOverlay(){this.isVisible?this.hideOverlay():this.showOverlay()}updateOverlayContent(e,t){this.overlayWindow&&this.overlayWindow.webContents.executeJavaScript(`\n        addAnswer(\`${e.replace(/`/g,"\\`")}\`, \`${t.replace(/`/g,"\\`")}\`);\n      `)}setPosition(e){this.overlayWindow&&(this.overlayWindow.setBounds(e),this.currentPosition=e)}getPosition(){return this.currentPosition}destroyOverlay(){this.overlayWindow&&(this.overlayWindow.destroy(),this.overlayWindow=null,this.isVisible=!1,this.currentPosition=null,console.log("Stealth overlay destroyed"))}isOverlayVisible(){return this.isVisible&&null!==this.overlayWindow}}},317:e=>{"use strict";e.exports=require("child_process")},360:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AudioCaptureManager=void 0;const a=n(86),i=n(477),r=n(38),s=n(949);t.AudioCaptureManager=class{constructor(){this.nativeCapture=null,this.supabaseWs=null,this.isCapturing=!1,this.sessionId=null,this.driverStatus=null}async initialize(){await this.checkDriverStatus()}async checkDriverStatus(){return this.driverStatus=await r.DriverDetector.getCurrentPlatformDriver(),console.log("Driver status:",this.driverStatus),this.driverStatus}async startCapture(e,t,n){if(this.isCapturing)throw new Error("Capture already in progress");if(!(await this.checkDriverStatus()).installed)throw new Error(`Virtual audio driver not installed. Please install ${r.DriverDetector.getDriverName()} first.`);this.sessionId=e;try{if(await this.connectToSupabase(n,e,t),this.nativeCapture=(0,i.createNativeAudioCapture)(),!this.nativeCapture)throw new Error("Failed to create native audio capture");if(!this.nativeCapture.initialize())throw new Error("Failed to initialize native audio capture");if(this.nativeCapture.on("audioData",(e=>{this.sendAudioToSupabase(e)})),!this.nativeCapture.startCapture())throw new Error("Failed to start native audio capture");this.isCapturing=!0,console.log("Native audio capture started successfully")}catch(e){throw console.error("Failed to start audio capture:",e),await this.cleanup(),e}}async stopCapture(){if(this.isCapturing){console.log("Stopping native audio capture...");try{this.nativeCapture&&(this.nativeCapture.stopCapture(),this.nativeCapture.destroy(),this.nativeCapture=null),this.supabaseWs&&(this.supabaseWs.close(),this.supabaseWs=null),this.isCapturing=!1,this.sessionId=null,console.log("Native audio capture stopped")}catch(e){console.error("Error stopping audio capture:",e)}}}getStatus(){return{isCapturing:this.isCapturing,sessionId:this.sessionId,hasNativeSupport:null!==this.nativeCapture,platform:process.platform,driverStatus:this.driverStatus}}getDriverInstaller(){return s.DriverInstaller.getInstance()}async connectToSupabase(e,t,n){const i=`${e.url.replace("https://","wss://")}/realtime/v1/websocket`;return new Promise(((r,s)=>{this.supabaseWs=new a.WebSocket(i,{headers:{Authorization:`Bearer ${n}`,apikey:e.key}});const o=setTimeout((()=>{s(new Error("WebSocket connection timeout"))}),1e4);this.supabaseWs.onopen=()=>{clearTimeout(o),console.log("Connected to Supabase WebSocket"),this.supabaseWs.send(JSON.stringify({topic:`session:${t}`,event:"phx_join",payload:{access_token:n},ref:Date.now().toString()})),r()},this.supabaseWs.onerror=e=>{clearTimeout(o),console.error("Supabase WebSocket error:",e),s(new Error("Failed to connect to Supabase WebSocket"))},this.supabaseWs.onclose=()=>{console.log("Supabase WebSocket connection closed")},this.supabaseWs.onmessage=e=>{try{const t="string"==typeof e.data?e.data:e.data instanceof ArrayBuffer?(new TextDecoder).decode(e.data):Buffer.from(e.data).toString(),n=JSON.parse(t);console.log("Received message from Supabase:",n)}catch(e){console.error("Failed to parse Supabase message:",e)}}}))}sendAudioToSupabase(e){if(this.supabaseWs&&this.supabaseWs.readyState===a.WebSocket.OPEN)try{const t=JSON.stringify({topic:"realtime",event:"audio_chunk",payload:{session_id:this.sessionId,audio_data:e.toString("base64"),format:"opus",timestamp:Date.now(),sample_rate:16e3,channels:1},ref:Date.now().toString()});this.supabaseWs.send(t)}catch(e){console.error("Failed to send audio data to Supabase:",e)}else console.warn("Supabase WebSocket not connected, dropping audio data")}async cleanup(){try{this.nativeCapture&&(this.nativeCapture.destroy(),this.nativeCapture=null),this.supabaseWs&&(this.supabaseWs.close(),this.supabaseWs=null)}catch(e){console.error("Error during cleanup:",e)}}}},417:(e,t,n)=>{e=n.nmd(e);try{process.dlopen(e,n(928).join(__dirname,n.p,"e41e9d832a413934e0869907ed167673.node"))}catch(e){throw new Error("node-loader:\n"+e)}},434:e=>{"use strict";e.exports=require("events")},477:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createNativeAudioCapture=function(){try{return"win32"===process.platform?new i:"darwin"===process.platform?new r:(console.error("Unsupported platform for native audio capture"),null)}catch(e){return console.error("Failed to create native audio capture:",e),null}};const a=n(434);class i extends a.EventEmitter{constructor(){super(),this.captureHandle=null;try{this.nativeBinding=n(797)}catch(e){throw console.error("Failed to load Windows audio capture module:",e),e}}initialize(){try{return this.captureHandle=this.nativeBinding.createCapture(),null!==this.captureHandle}catch(e){return console.error("Failed to initialize Windows audio capture:",e),!1}}startCapture(){if(!this.captureHandle)return console.error("Audio capture not initialized"),!1;try{return this.nativeBinding.setAudioCallback((e=>{this.emit("audioData",e)})),this.nativeBinding.startCapture(this.captureHandle)}catch(e){return console.error("Failed to start Windows audio capture:",e),!1}}stopCapture(){if(this.captureHandle)try{this.nativeBinding.stopCapture(this.captureHandle)}catch(e){console.error("Failed to stop Windows audio capture:",e)}}destroy(){if(this.captureHandle)try{this.nativeBinding.destroyCapture(this.captureHandle),this.captureHandle=null}catch(e){console.error("Failed to destroy Windows audio capture:",e)}}}class r extends a.EventEmitter{constructor(){super(),this.captureHandle=null;try{this.nativeBinding=n(417)}catch(e){throw console.error("Failed to load macOS audio capture module:",e),e}}initialize(){try{return this.captureHandle=this.nativeBinding.createMacOSCapture(),null!==this.captureHandle}catch(e){return console.error("Failed to initialize macOS audio capture:",e),!1}}startCapture(){if(!this.captureHandle)return console.error("Audio capture not initialized"),!1;try{return this.nativeBinding.setAudioCallback((e=>{this.emit("audioData",e)})),this.nativeBinding.startMacOSCapture(this.captureHandle)}catch(e){return console.error("Failed to start macOS audio capture:",e),!1}}stopCapture(){if(this.captureHandle)try{this.nativeBinding.stopMacOSCapture(this.captureHandle)}catch(e){console.error("Failed to stop macOS audio capture:",e)}}destroy(){if(this.captureHandle)try{this.nativeBinding.destroyMacOSCapture(this.captureHandle),this.captureHandle=null}catch(e){console.error("Failed to destroy macOS audio capture:",e)}}}},482:e=>{"use strict";e.exports=require("electron")},797:(e,t,n)=>{e=n.nmd(e);try{process.dlopen(e,n(928).join(__dirname,n.p,"faa3c24ad66fdde085a1819279930d57.node"))}catch(e){throw new Error("node-loader:\n"+e)}},928:e=>{"use strict";e.exports=require("path")},949:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DriverInstaller=void 0;const a=n(482),i=n(38);class r{constructor(){this.installationSteps=[]}static getInstance(){return r.instance||(r.instance=new r),r.instance}setStatusChangeCallback(e){this.onStatusChange=e}async initializeInstallationFlow(){const e=process.platform;if("win32"===e)this.installationSteps=await this.getWindowsInstallationSteps();else{if("darwin"!==e)throw new Error("Unsupported platform for driver installation");this.installationSteps=await this.getMacOSInstallationSteps()}return this.installationSteps}async getWindowsInstallationSteps(){const e=await i.DriverDetector.detectWindowsVBCable();return[{id:"download",title:"Download VB-Cable",description:"Download the VB-Cable virtual audio driver from the official website",action:async()=>{await a.shell.openExternal("https://vb-audio.com/Cable/")},completed:!1},{id:"install",title:"Install VB-Cable",description:"Run the downloaded installer as Administrator and follow the setup wizard",completed:e.installed},{id:"restart",title:"Restart Computer",description:"Restart your computer to complete the driver installation",completed:e.installed},{id:"verify",title:"Verify Installation",description:"Check that VB-Cable appears in your audio devices",action:async()=>{await this.verifyInstallation()},completed:e.installed}]}async getMacOSInstallationSteps(){const e=await i.DriverDetector.detectMacOSBlackHole();return[{id:"download",title:"Download BlackHole",description:"Download BlackHole from GitHub releases or install via Homebrew",action:async()=>{await a.shell.openExternal("https://github.com/ExistentialAudio/BlackHole/releases")},completed:!1},{id:"install",title:"Install BlackHole",description:"Install using: brew install blackhole-2ch or run the downloaded installer",completed:e.installed},{id:"permissions",title:"Grant Permissions",description:"Allow BlackHole in System Preferences > Security & Privacy",completed:e.installed},{id:"verify",title:"Verify Installation",description:"Check that BlackHole appears in Audio MIDI Setup",action:async()=>{await this.verifyInstallation()},completed:e.installed}]}async executeStep(e){const t=this.installationSteps.find((t=>t.id===e));if(t&&t.action)try{await t.action(),t.completed=!0,this.notifyStatusChange()}catch(t){throw console.error(`Failed to execute step ${e}:`,t),t}}async verifyInstallation(){const e=await i.DriverDetector.getCurrentPlatformDriver();if(e.installed){const e=this.installationSteps.find((e=>"verify"===e.id));e&&(e.completed=!0,this.notifyStatusChange())}return e}async refreshStepStatus(){(await i.DriverDetector.getCurrentPlatformDriver()).installed&&(this.installationSteps.forEach((e=>{e.completed=!0})),this.notifyStatusChange())}getInstallationSteps(){return this.installationSteps}isInstallationComplete(){return this.installationSteps.every((e=>e.completed))}notifyStatusChange(){this.onStatusChange&&this.onStatusChange([...this.installationSteps])}getDetailedInstructions(){return"win32"===process.platform?["1. Download VB-Cable from https://vb-audio.com/Cable/",'2. Right-click the installer and select "Run as Administrator"',"3. Follow the installation wizard prompts","4. Restart your computer when prompted",'5. Open Sound settings and verify "CABLE Input" and "CABLE Output" appear','6. Set "CABLE Input" as your default recording device if needed']:"darwin"===process.platform?["1. Install via Homebrew: brew install blackhole-2ch","OR download from: https://github.com/ExistentialAudio/BlackHole/releases","2. If using installer, double-click the .pkg file","3. Go to System Preferences > Security & Privacy","4. Allow BlackHole if prompted","5. Open Audio MIDI Setup and verify BlackHole appears","6. Create a Multi-Output Device including BlackHole if needed"]:["Platform not supported"]}}t.DriverInstaller=r}},t={};function n(a){var i=t[a];if(void 0!==i)return i.exports;var r=t[a]={id:a,loaded:!1,exports:{}};return e[a](r,r.exports,n),r.loaded=!0,r.exports}n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),n.p="",(()=>{"use strict";const e=n(482),t=n(928),a=n(86),i=n(360),r=n(270),s=n(38),o=n(949);new class{constructor(){this.mainWindow=null,this.wsServer=null,this.audioCaptureManager=null,this.overlayManager=null,this.setupApp()}setupApp(){e.app.whenReady().then((()=>{this.createMainWindow(),this.startWebSocketServer(),this.setupAudioCapture(),this.setupOverlay(),this.setupIpcHandlers()})),e.app.on("window-all-closed",(()=>{"darwin"!==process.platform&&e.app.quit()})),e.app.on("activate",(()=>{0===e.BrowserWindow.getAllWindows().length&&this.createMainWindow()}))}createMainWindow(){this.mainWindow=new e.BrowserWindow({width:400,height:500,webPreferences:{nodeIntegration:!1,contextIsolation:!0,preload:(0,t.join)(__dirname,"preload.js")},show:!1,skipTaskbar:!0,title:"InterviewAce Helper"}),this.mainWindow.loadFile((0,t.join)(__dirname,"..","status.html")),this.hideFromScreenShare()}hideFromScreenShare(){this.mainWindow&&this.mainWindow.setContentProtection(!0)}setupIpcHandlers(){e.ipcMain.handle("check-driver-status",(async()=>await s.DriverDetector.getCurrentPlatformDriver())),e.ipcMain.handle("get-installation-steps",(async()=>{const e=o.DriverInstaller.getInstance();return await e.initializeInstallationFlow()})),e.ipcMain.handle("execute-installation-step",(async(e,t)=>{const n=o.DriverInstaller.getInstance();return await n.executeStep(t),n.getInstallationSteps()})),e.ipcMain.handle("verify-driver-installation",(async()=>{const e=o.DriverInstaller.getInstance();return await e.verifyInstallation()})),e.ipcMain.handle("refresh-driver-status",(async()=>{const e=o.DriverInstaller.getInstance();return await e.refreshStepStatus(),e.getInstallationSteps()})),e.ipcMain.handle("get-driver-instructions",(async()=>o.DriverInstaller.getInstance().getDetailedInstructions())),e.ipcMain.handle("open-driver-download",(async()=>{await e.shell.openExternal(s.DriverDetector.getDriverDownloadUrl())})),e.ipcMain.handle("create-stealth-overlay",(async(e,t,n)=>this.overlayManager?this.overlayManager.createStealthOverlay(t,n):null)),e.ipcMain.handle("show-overlay",(async()=>{this.overlayManager&&this.overlayManager.showOverlay()})),e.ipcMain.handle("hide-overlay",(async()=>{this.overlayManager&&this.overlayManager.hideOverlay()})),e.ipcMain.handle("toggle-overlay",(async()=>{this.overlayManager&&this.overlayManager.toggleOverlay()})),e.ipcMain.handle("set-overlay-position",(async(e,t)=>{this.overlayManager&&this.overlayManager.setPosition(t)})),e.ipcMain.handle("update-overlay-content",(async(e,t,n)=>{this.overlayManager&&this.overlayManager.updateOverlayContent(t,n)})),e.ipcMain.handle("destroy-overlay",(async()=>{this.overlayManager&&this.overlayManager.destroyOverlay()})),e.ipcMain.handle("get-capabilities",(async()=>this.audioCaptureManager?.getStatus()||{available:!1})),e.ipcMain.handle("start-capture",(async(e,t,n,a)=>{this.audioCaptureManager&&(await this.audioCaptureManager.startCapture(t,n,a),this.overlayManager&&this.overlayManager.showOverlay())})),e.ipcMain.handle("stop-capture",(async()=>{this.audioCaptureManager&&(await this.audioCaptureManager.stopCapture(),this.overlayManager&&this.overlayManager.hideOverlay())})),e.ipcMain.handle("minimize-window",(async()=>{this.mainWindow&&this.mainWindow.minimize()})),e.ipcMain.handle("close-window",(async()=>{this.mainWindow&&this.mainWindow.close()}))}startWebSocketServer(){this.wsServer=new a.WebSocketServer({port:8765}),this.wsServer.on("connection",(e=>{console.log("Client connected to native helper"),e.on("message",(async t=>{try{const n=JSON.parse(t.toString());await this.handleClientMessage(e,n)}catch(t){console.error("Error handling client message:",t),e.send(JSON.stringify({type:"error",message:t instanceof Error?t.message:String(t)}))}})),e.on("close",(()=>{console.log("Client disconnected")})),this.sendCapabilitiesAndDriverStatus(e)})),console.log("WebSocket server started on port 8765")}async sendCapabilitiesAndDriverStatus(e){const t=await s.DriverDetector.getCurrentPlatformDriver();e.send(JSON.stringify({type:"capabilities",data:{available:!0,version:"1.0.0",drivers:{windows:"win32"===process.platform,macos:"darwin"===process.platform},driverStatus:t}}))}async handleClientMessage(e,t){switch(t.action){case"startCapture":this.audioCaptureManager&&(await this.audioCaptureManager.startCapture(t.sessionId,t.jwt,t.supabaseConfig),this.overlayManager&&(this.overlayManager.createStealthOverlay(t.sessionId),this.overlayManager.showOverlay()),e.send(JSON.stringify({type:"captureStatus",status:"active"})));break;case"stopCapture":this.audioCaptureManager&&(await this.audioCaptureManager.stopCapture(),this.overlayManager&&this.overlayManager.hideOverlay(),e.send(JSON.stringify({type:"captureStatus",status:"idle"})));break;case"showOverlay":this.overlayManager&&(this.overlayManager.showOverlay(),e.send(JSON.stringify({type:"overlayStatus",visible:!0})));break;case"hideOverlay":this.overlayManager&&(this.overlayManager.hideOverlay(),e.send(JSON.stringify({type:"overlayStatus",visible:!1})));break;case"updateOverlay":this.overlayManager&&t.question&&t.answer&&(this.overlayManager.updateOverlayContent(t.question,t.answer),e.send(JSON.stringify({type:"overlayUpdated",success:!0})));break;case"checkDriverStatus":const n=await s.DriverDetector.getCurrentPlatformDriver();e.send(JSON.stringify({type:"driverStatus",status:n}));break;case"getCapabilities":await this.sendCapabilitiesAndDriverStatus(e)}}async setupAudioCapture(){this.audioCaptureManager=new i.AudioCaptureManager,await this.audioCaptureManager.initialize()}setupOverlay(){this.overlayManager=new r.OverlayManager}}})()})();