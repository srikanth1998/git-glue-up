import{R as M,j as u,a as c,r as R}from"./globals.js";import{u as x,t as E}from"./settingAtom.js";import"./vanilla.js";const D=16e3,v=30,y=D*v,w=()=>{const[A]=x(E),f=A.language,e=c.useRef(null),[l,g]=c.useState(!1),i=c.useRef(null),[d,m]=c.useState([]),h=r=>{e.current||navigator.mediaDevices.getUserMedia({audio:{mandatory:{chromeMediaSource:"tab",chromeMediaSourceId:r}}}).then(n=>{console.debug("Setting up media recorder",n),e.current=new MediaRecorder(n),i.current=new AudioContext({sampleRate:16e3});const o=new AudioContext;o.createMediaStreamSource(e.current.stream).connect(o.destination),e.current.onstart=()=>{g(!0),m([])},e.current.ondataavailable=a=>{a.data.size>0?(console.debug("Received chunk",a.data),m(t=>[...t,a.data]),setTimeout(()=>{e.current&&e.current.requestData()},10*1e3)):(console.debug("Empty chunk received"),setTimeout(()=>{e.current&&e.current.requestData()},25))},e.current.onstop=()=>{g(!1)},e.current.start()}).catch(n=>console.error("The following error occurred: ",n))};R.useEffect(()=>{var r;if(e.current&&l)if(d.length>0){const n=new Blob(d,{type:e.current.mimeType}),o=new FileReader;o.onloadend=async()=>{const s=o.result;if(i.current===null){console.debug("Audio context is null");return}if(!s){console.debug("Array buffer is null");return}if(!(s instanceof ArrayBuffer)){console.debug("Array buffer is not an ArrayBuffer");return}let t=(await i.current.decodeAudioData(s)).getChannelData(0);t.length>y&&(t=t.slice(-y)),console.debug("Decoded audio",t);const S=JSON.stringify(Array.from(t));chrome.runtime.sendMessage({type:"transcription-message",data:{type:"generate",serializedAudio:S,language:f}})},o.readAsArrayBuffer(n)}else(r=e.current)==null||r.requestData()},[l,d,f]);const p=c.useRef(!1),b=()=>{p.current||(p.current=!0,console.debug("Setting up offscreen script"),chrome.runtime.onMessage.addListener(async r=>{r.target==="offscreen"&&(console.debug("Received message",r),r.type==="start-recording"&&(console.debug("Received start-recording message",r.streamId),h(r.streamId)))}),chrome.runtime.sendMessage({type:"offscreen-ready"}))};return R.useEffect(()=>{b()}),u.jsx("div",{children:u.jsx("h1",{children:"Offscreen"})})};M.createRoot(document.getElementById("root")).render(u.jsx(c.StrictMode,{children:u.jsx(w,{})}));
